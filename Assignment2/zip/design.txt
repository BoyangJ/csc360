Name: Boyang Jiao
UVicID: V00800928
Date: Nov 4, 2016
Course: CSC 360
Instructor: Kui Wu

Assignment 2: Multi-Flow Scheduler (MFS)
Design Document

(note: parts marked 'EDIT:' were added after completing the project)

1. There will likely be a main thread the program starts with, and one thread for each flow provided in the input file. Each flow will simulate a different device, all trying to use a single router.

The main thread will create all the child threads, and wait for all children to finish before terminating the program. The main thread will also be where all the global (shared) variables and functions are initiated.

The child threads will sleep (to simulate arrivals at different times), sort themselves into a queue based on the sorting rules, and wait for their turn to transmit. Once a thread is done transmitting, it will also signal the other threads, so the next thread in the queue can transmit.


2. The main thread is technically different from the other threads, but it will not "control" the child threads - only create and join them.
Each flow thread will otherwise act independently, but cooperatively (ie. only one in critical section at a time, sort themselves so highest priority goes first, etc)


3. I believe only one mutex is enough. The mutex will protect the critical section, which includes the queue of flows waiting to transmit, and the 'busy' flag used to track whether a flow is currently transmitting or not.


4. Once the main thread has finished creating all the necessary children, it will wait until they are all finished. Perhaps the main thread could also be in charge of the waitingQueue, and sort it.

EDIT: The main thread creates all the child threads, and idles until they are all finished. It does not do any sorting, and does not modify any status-tracking variables.


5. Flows will be simulated using threads, and individual flow information will be stored in structs (with values id, arrival time, transmission time, and priority).


6. A mutex will be used to protect the waiting queue and the status-tracking variables, to prevent issues where multiple threads add themselves to the queue at once (which may cause over-writing, or sorting errors). 


7. I will be using two convars -
    a) One will track which flow should execute next, and one will track when the transmission pipe is busy. 
    b) They will both be protected by the same mutex (the only mutex I will have).
    c) Once a flow finishes, it will use pthread_cond_signal() to let the next thread in the queue transmit.

EDIT: I only used one convar, to schedule queues to wait when the transmission pipe is busy. Also, instead of continuously calling pthread_cond_signal() repeatedly until the correct thread awoke, I used pthread_cond_broadcast() instead. 


8.
Read input file and create new pthread will a flow's info.
Each thread will immediately sleep according to its arrival time.
When a thread arrives, 
    1. print arrival message.
    2. lock mutex
    3. check if transmission pipe is busy, and if there's a waiting queue
        -if no, print transmission message, set busy flag, unlock mutex, and transmit (sleep for transmission time)
        -if yes, print waiting message, add itself to the waiting queue, sort the queue, and call pthread_cond_wait()

When a thread finishes,
    1. print finished message.
    2. lock mutex
    3. call pthread_cond_signal() to wake up next thread
    4. unlock mutex

When a thread is awoken by pthread_cond_signal()
    1. check if transmission is ready, and if it's at top of queue
        -if yes, print transmission message, set busy flag, unlock mutex, and transmit (sleep for transmission time)
        -if no, signal other threads with pthread_cond_signal() and go back to waiting

EDIT: pthread_cond_signal() was not used; instead, pthread_cond_broadcast() was used, and each time, all but one thread would go back to waiting, while one thread (the one at top of queue) would go to transmit.




